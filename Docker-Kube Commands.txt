install the app and create the jar.
Docker :
1. docker build -t <jar name> . -> tag the jar into docker image.
2. docker images
3. docker run -p<docker port>:<local port> imagename
or - with profile: 
docker run -e "SPRING_PROFILES_ACTIVE=<env>" -p8092:8084 <imagename>

Docker run in detached mode: docker run -d -p8092:8084 <imagename>
Logs from that running container: docker logs <container-id>
Stop that docker container: docker stop <container-id>
Adding name while running the container: docker run -d --name testso -p8092:8084 <imagename>

docker build -t springboot-k8s-demo:1.0 .
docker run -p8080:8080 springboot-k8s-demo

docker ps : This command is used to list all the running Docker container
docker ps -a : It is used to show all containers(including stopped ones).
The following command will only show you the stopped containers.

docker ps --filter "status=exited" or docker ps -f "status=exited"

Now your able to perform docker logs <container-id> on your container to see what is going wrong.

Remove images:
docker rmi <image_number>

Remove container:
docker rm 

Delete local images create repo on docker hub
and push image.
Pull image from there


Google Kubernetes:

1. From marketplace -> enable Google Kuberenetes Engine
2. From Kubernetes -> create cluster
3. Put name etc. -> configure cluster
4. From Workload publish through terminal
5. Upload .yaml file and then run the command below:

		kubectl appy -f <yaml file name>
6. In order to delete:
		kubectl delete -f <yaml file name>
		
Minikube:

It is single node cluster
Windows: https://medium.com/@javatechie/kubernetes-tutorial-setup-kubernetes-in-windows-run-spring-boot-application-on-k8s-cluster-c6cab8f7de5a

Not using yaml:
kubectl create deployment spring-boot-k8s --image=springboot-k8s-demo:1.0 --port=8080

Mac: 